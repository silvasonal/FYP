let isStreaming = false;
const videoElement = document.getElementById('video');
const startBtn = document.getElementById('startBtn');
const stopBtn = document.getElementById('stopBtn');
const analyzeBtn = document.getElementById('analyzeBtn');
const refreshBtn = document.getElementById('refreshBtn');
const resultsDiv = document.getElementById('analysis-results');
const statusElement = document.getElementById('status');

function updateStatus(message, type = 'info') {
    statusElement.textContent = message;
    statusElement.className = `status status-${type}`;
}

// Frontend video stream initialization
async function startVideo() {
    try {
            updateStatus('Starting video stream...');
        
        const response = await fetch('/start');
        if (response.ok) {
            videoElement.src = videoFeedUrl;
            isStreaming = true;
            startBtn.disabled = true;
            stopBtn.disabled = false;
            analyzeBtn.disabled = true;
            refreshBtn.disabled = true;
                    updateStatus('Emotion detection active', 'success');
        }
    } catch (error) {
        updateStatus(`Error: ${error.message}`, 'error');
    }
}

async function stopVideo() {
    try {
                updateStatus('Stopping video stream...');
        
        const response = await fetch('/stop');
        if (response.ok) {
            videoElement.src = '';
            isStreaming = false;
            startBtn.disabled = false;
            stopBtn.disabled = true;
            analyzeBtn.disabled = false;
                    updateStatus('Video recording stopped', 'info');
        }
    } catch (error) {
        updateStatus(`Error: ${error.message}`, 'error');
    }
}

async function analyzeAll() {
    try {
        updateStatus('Analyzing data...');
        
        analyzeBtn.disabled = true;
        refreshBtn.disabled = false;
        
        const analysisResponse = await fetch('/analyze', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });

        if (!analysisResponse.ok) {
            throw new Error('Analysis failed');
        }

        const reportResponse = await fetch('/get_report');
        const data = await reportResponse.json();
        
        if (data.status === 'success') {
            resultsDiv.textContent = data.content;
            updateStatus('Analysis complete', 'success');
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        resultsDiv.textContent = `Error: ${error.message}`;
        updateStatus('Analysis failed', 'error');
    }
}

async function refreshPage() {
    try {
        await fetch('/refresh');
        location.reload();
    } catch (error) {
        updateStatus(`Error refreshing: ${error.message}`, 'error');
    }
}

async function downloadReport() {
    try {
        updateStatus('Preparing download...');
        const response = await fetch('/get_report');
        const data = await response.json();
        
        if (data.status === 'success') {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Title styling
            doc.setFont("helvetica", "bold");
            doc.setFontSize(20);
            doc.text("D-DiTECT : Depression Detection Report", 10, 20);

            // Add content
            doc.setFont("helvetica", "normal");
            doc.setFontSize(12);

            // Wrap text and handle line breaks
            const content = data.content; 
            const marginLeft = 10;
            const marginTop = 30;
            const lineHeight = 8; 
            const pageWidth = doc.internal.pageSize.width - 20; 
            const textLines = doc.splitTextToSize(content, pageWidth); 

            let currentY = marginTop;
            textLines.forEach((line) => {
                if (currentY + lineHeight > doc.internal.pageSize.height - 10) {
                    doc.addPage(); // Add a new page if content overflows
                    currentY = 10; 
                }
                doc.text(line, marginLeft, currentY);
                currentY += lineHeight;
            });

            doc.setFont("helvetica", "italic");
            doc.setFontSize(8);
            doc.text("Report generated by D-DiTECT", 10, doc.internal.pageSize.height - 10);

            const username = data.username;
            // Save the PDF
            doc.save(`${username ? username : 'guest'}_depression_detection_report.pdf`);
            
            updateStatus('Report downloaded', 'success');
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        updateStatus(`Download failed: ${error.message}`, 'error');
    }
}

window.addEventListener('beforeunload', async () => {
    if (isStreaming) {
        await stopVideo();
    }
});